
const config = require('./config');
const fs = require('mz/fs');
const path = require('path');

let themeName;
let themePath;
let theme;

function setCurrentThemeFromConfig() {
  themeName = config.get('theme');
  themePath = path.normalize(__dirname + '/../themes/' + themeName);

  return fs.readFile(themePath + '/theme.json').then((res) => {
    theme = JSON.parse(res);
  }).then(generateLess);
}

function getCurrentTheme() {
  return theme;
}

function getCurrentThemeName() {
  return themeName;
}

function generateLess() {
  const outputPath = './public/styles/theme';

  return unlinkOldFiles()
    .then(symlinkNewFiles)
    .then(generateParameters);

  function unlinkOldFiles() {
    return new Promise((resolve, reject) => {
      fs.unlink(outputPath + '/before.less')
        .then(() => fs.unlink(outputPath + '/after.less'))
        .then(() => fs.unlink(outputPath + '/parameters.less'))
        .then(() => resolve())
        .catch((e) => resolve());
    });
  }

  function symlinkNewFiles() {
    return fs.symlink(themePath + '/less/after.less', outputPath + '/after.less')
      .then(() => fs.symlink(themePath + '/less/before.less', outputPath + '/before.less'));
  }

  function generateParameters() {
    const lines = [
      '/* Generated by SynBioHub. Modify in config.local.json, not in this file. */',
      '',
    ];

    theme.parameters.forEach((param) => {
      const value = getParameterValue(param);

      lines.push('@' + param.variable + ': ' + value + ';');
    });

    lines.push('', '');

    return fs.writeFile(outputPath + '/parameters.less', lines.join('\n'));
  }
}

function getParameterValue(param) {
  const configParameters = config.get('themeParameters')[themeName] || {};

  let value = configParameters[param.variable];

  if (value === undefined) {
    value = param['default'];
  }

  return value;
}

module.exports = {
  setCurrentThemeFromConfig: setCurrentThemeFromConfig,
  getCurrentTheme: getCurrentTheme,
  getCurrentThemeName: getCurrentThemeName,
  getParameterValue: getParameterValue,
  generateLess: generateLess,
};

